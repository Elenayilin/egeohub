/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  background: #f9f9f9;
  color: #333;
  line-height: 1.6;
}

/* Header */
.site-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #fff;
  padding: 10px 20px;
  border-bottom: 1px solid #ddd;
  position: sticky;
  top: 0;
  z-index: 100;
}

.logo {
  font-size: 24px;
  font-weight: bold;
}

.main-nav ul {
  list-style: none;
  display: flex;
  gap: 15px;
}

.main-nav a {
  text-decoration: none;
  color: #333;
  font-weight: 500;
}

/* Hero section */
.hero {
  background: url('‰Ω†ÁöÑËÉåÊôØÂõæÁâá.jpg') center/cover no-repeat;
  height: 300px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 40px;
}

.hero-content {
  background: rgba(255, 255, 255, 0.8);
  padding: 20px;
  border-radius: 8px;
  text-align: center;
}

.hero-content h1 {
  font-size: 32px;
  margin-bottom: 10px;
}

.hero-content p {
  font-size: 18px;
}

/* Grid sections */
.grid-section {
  padding: 0 20px 40px;
  background: #fff;
  margin-bottom: 20px;
}

.grid-section h2 {
  font-size: 28px;
  margin: 20px 0;
  text-align: center;
}

/* Cards */
.grid-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
}

.card {
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
  overflow: hidden;
  transition: transform 0.2s, box-shadow 0.2s;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.card img {
  width: 100%;
  height: 150px;
  object-fit: cover;
}

.card h3 {
  padding: 10px;
  font-size: 18px;
  text-align: center;
}

/* Content sections */
.content-section {
  background: #fff;
  margin: 20px;
  padding: 20px;
  border-radius: 8px;
}

.content-section h2 {
  font-size: 28px;
  margin-bottom: 15px;
  text-align: center;
}

/* Lists and links */
.content-section ul {
  list-style: disc inside;
}

.content-section a {
  color: #0066cc;
  text-decoration: none;
}

/* Videos */
.video-embed {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

/* Table styles (for Classroom Points) */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

thead {
  background-color: #eaf6fb;
}

th, td {
  padding: 10px;
  border: 1px solid #ddd;
  text-align: left;
}

/* Buttons */
button {
  padding: 8px 16px;
  background-color: #007acc;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #005f99;
}

/* Input fields */
input, textarea {
  padding: 8px;
  width: 100%;
  max-width: 600px;
  border: 1px solid #ccc;
  border-radius: 5px;
  margin-top: 10px;
}

/* Responsive */
@media (max-width: 768px) {
  .hero {
    height: 200px;
  }
  .hero-content h1 {
    font-size: 24px;
  }
  .video-embed iframe {
    width: 100%;
    height: auto;
  }
}

<style>
  .hero {
    background: url('https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/World_Map_Blank_without_borders.svg/1200px-World_Map_Blank_without_borders.svg.png') center/cover no-repeat;
    background-color: #eaf6fb;
    height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 40px;
  }
  .section-icon {
    height: 30px;
    vertical-align: middle;
    margin-right: 10px;
  }
  .card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  /* üå≥ ËãπÊûúÊëáÊëÜÂä®Áîª */
  @keyframes sway {
    0% { transform: rotate(-3deg); }
    50% { transform: rotate(3deg); }
    100% { transform: rotate(-3deg); }
  }
  .apple {
    animation: sway 2.5s ease-in-out infinite;
    transition: transform 0.5s ease-out;
    z-index: 2;
  }

  /* üçé ÊéâËêΩÂä®Áîª */
  @keyframes drop {
    0% { transform: translateY(0); opacity: 1; }
    100% { transform: translateY(300px); opacity: 0; }
  }
  .falling {
    animation: drop 1s ease-in forwards;
    z-index: 1;
  }

  /* üçè Ê∑ªÂä†Êó∂ÂÜíÊ≥° */
  @keyframes popIn {
    0% { transform: scale(0); opacity: 0; }
    100% { transform: scale(1); opacity: 1; }
  }
  .apple.pop {
    animation: popIn 0.6s ease-out;
  }
</style>

<script>
function displayCommunity() {
  const allQuestions = JSON.parse(localStorage.getItem('questions')) || [];
  const applesDiv = document.getElementById('applesContainer');
  const basketList = document.getElementById('basketContainer');
  applesDiv.innerHTML = '';
  basketList.innerHTML = '';

  allQuestions.forEach((q, index) => {
    if (q.isPublic && !q.isResolved) {
      const apple = document.createElement('img');
      apple.src = 'https://cdn-icons-png.flaticon.com/512/415/415733.png';
      apple.style.position = 'absolute';
      apple.style.top = `${Math.random() * 60 + 20}%`;
      apple.style.left = `${Math.random() * 80 + 10}%`;
      apple.style.width = '40px';
      apple.style.cursor = 'pointer';
      apple.className = 'apple';
      if (index === allQuestions.length - 1) {
        apple.classList.add('pop');
      }
      apple.title = `${q.name || 'Anonymous'}: ${q.question}${q.reply ? `\nReply: ${q.reply}` : ''}`;
      if (isTeacherMode) {
        apple.onclick = () => manageQuestion(index, apple);
      }
      applesDiv.appendChild(apple);
    } else if (q.isResolved) {
      const li = document.createElement('li');
      li.textContent = `${q.name || 'Anonymous'}: ${q.question}`;
      basketList.appendChild(li);
    }
  });
}

function manageQuestion(index, appleElement) {
  const allQuestions = JSON.parse(localStorage.getItem('questions')) || [];
  const q = allQuestions[index];
  const reply = prompt(`Reply to ${q.name || 'Anonymous'}:\n${q.question}`, q.reply || '');
  if (reply !== null) {
    q.reply = reply;
  }
  const markResolved = confirm('Mark this question as resolved?');
  if (markResolved) {
    if (appleElement) {
      appleElement.classList.add('falling');
      setTimeout(() => {
        q.isResolved = true;
        localStorage.setItem('questions', JSON.stringify(allQuestions));
        displayCommunity();
      }, 1000);
    } else {
      q.isResolved = true;
    }
  }
  const confirmDelete = confirm('Do you also want to delete this question from the system?');
  if (confirmDelete) {
    allQuestions.splice(index, 1);
  } else {
    allQuestions[index] = q;
  }
  localStorage.setItem('questions', JSON.stringify(allQuestions));
  displayCommunity();
}
</script>
